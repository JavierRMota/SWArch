-  id: 0
   question: 'What is architecture?'
   A: 'The function of the ingredients of a recipe as well as the flavour relationship among them.'
   B: 'The relationship between lines of code and hours of work.'
   C: 'The function of the components of a system as well as the hierarchic relationship among them.'
   D: 'The function of the modules inside the source code of a program.'
-  id: 1
   question: 'What is a component?'
   A: 'An encapsulated part of a software system that serves as a building block for the structure of a system.'
   B: 'Lines of code inside the source code of a program.'
   C: 'An encapsulated part of a code that serves as the main function from the program.'
   D: 'An encapsulated part of a recipe that serves as a topping for the structure of a cake.'
-  id: 2
   question: 'When we talk about Object Oriented Programming (OOP), what is Abstraction?'
   A: 'Hide the details of the implementation of an object.'
   B: 'A subclass may inherit the structure and behavior of its superclass.'
   C: 'Objects can respond to the same message in different ways in a class-dependent fashion.'
   D: 'Essential characteristics of some object, relative to the perspective of the viewer.'
-  id: 3
   question: 'When we talk about Object Oriented Programming (OOP), what is Encapsulation?'
   A: 'A subclass may inherit the structure and behavior of its superclass.'
   B: 'Hide the details of the implementation of an object.'
   C: 'Objects can respond to the same message in different ways in a class-dependent fashion.'
   D: 'Essential characteristics of some object, relative to the perspective of the viewer.'
-  id: 4
   question: 'When we talk about Object Oriented Programming (OOP), what is Polymorphism?'
   A: 'Objects can respond to the same message in different ways in a class-dependent fashion.'
   B: 'A subclass may inherit the structure and behavior of its superclass.'
   C: 'Essential characteristics of some object, relative to the perspective of the viewer.'
   D: 'Hide the details of the implementation of an object.'
-  id: 5
   question: 'When we talk about Object Oriented Programming (OOP), what is Inheritance?'
   A: 'Essential characteristics of some object, relative to the perspective of the viewer.'
   B: 'A subclass may inherit the structure and behavior of its superclass.'
   C: 'Hide the details of the implementation of an object.'
   D: 'Objects can respond to the same message in different ways in a class-dependent fashion.'
-  id: 6
   question: 'Description of the Observer Pattern.'
   A: 'This pattern is a behavioral design pattern that defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
   B: 'This pattern is a behavioral design pattern that turns a set of behaviors into objects and makes them interchangeable inside original context object.'
   C: 'This pattern provides a way to subscribe and unsubscribe to and from these events for any object that implements a subscriber interface.'
   D: 'This pattern provides functions that work like a proxy between programs.'
-  id: 7
   question: 'Description of the Template Method Pattern.'
   A: 'This pattern is a behavioral design pattern that turns a set of behaviors into objects and makes them interchangeable inside original context object.'
   B: 'This pattern provides a way to subscribe and unsubscribe to and from these events for any object that implements a subscriber interface.'
   C: 'This pattern provides functions that work like a proxy between programs.'
   D: 'This pattern is a behavioral design pattern that defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
-  id: 8
   question: 'Description of the Strategy Pattern.'
   A: 'This pattern is a behavioral design pattern that turns a set of behaviors into objects and makes them interchangeable inside original context object.'
   B: 'This pattern provides a way to subscribe and unsubscribe to and from these events for any object that implements a subscriber interface.'
   C: 'This pattern provides functions that work like a proxy between programs.'
   D: 'This pattern is a behavioral design pattern that defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
-  id: 9
   question: 'This pattern uses the inheritance property of Object Oriented Programming (OOP).'
   A: 'Observer Pattern.'
   B: 'Template Method Pattern.'
   C: 'DSL Pattern.'
   D: 'Singleton Pattern.'
-  id: 10
   question: 'What is refactoring?'
   A: 'A change made to the external structure of software to make it easier to understand and more difficult to modify changing its observable behavior.'
   B: 'A change made to the external structure of software to make it easier to understand and cheaper to modify without changing its iterable behavior.'
   C: 'A change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.'
   D: 'A change made to the internal structure of software to make it easier to understand and cheaper to modify with changes in its observable behavior.'
-  id: 11
   question: '(Refactor) Replace Magic Number with Symbolic Constant description.'
   A: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   B: 'The name of the method does not reveal its purpose. Change the name of the method.'
   C: 'The code has a temporary variable assigned to more than once, but it is not a loop variable nor a collecting temporary variable. Make a separate temporary variable for each assignment.'
   D: 'The code has a particular number with a particular meaning. Create a constant, name it after the meaning, and replace the number with it.'
-  id: 12
   question: '(Refactor) Rename Method description.'
   A: 'The name of the method does not reveal its purpose. Change the name of the method.'
   B: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   C: 'The code has a temporary variable assigned to more than once, but it is not a loop variable nor a collecting temporary variable. Make a separate temporary variable for each assignment.'
   D: 'The code has a particular number with a particular meaning. Create a constant, name it after the meaning, and replace the number with it.'
-  id: 13
   question: '(Refactor) Split Temporary Variable description.'
   A: 'The code has a particular number with a particular meaning. Create a constant, name it after the meaning, and replace the number with it.'
   B: 'The code has a temporary variable assigned to more than once, but it is not a loop variable nor a collecting temporary variable. Make a separate temporary variable for each assignment.'
   C: 'The name of the method does not reveal its purpose. Change the name of the method.'
   D: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
-  id: 14
   question: '(Refactor) Extract Method description.'
   A: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   B: 'The code has a particular number with a particular meaning. Create a constant, name it after the meaning, and replace the number with it.'
   C: 'The code has a fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.'
   D: 'The name of the method does not reveal its purpose. Change the name of the method.'
-  id: 15
   question: '(Refactor) Hide Method description'
   A: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   B: 'The code has a fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.'
   C: 'If a public method is not used by any other class, make it a private method.'
   D: 'The name of the method does not reveal its purpose. Change the name of the method.'
-  id: 16
   question: '(Refactor) Introduce Explaining Variable description.'
   A: 'If a public method is not used by any other class, make it a private method.'
   B: 'The code has a fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.'
   C: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   D: 'The code has a complicated expression. Put the result of the expression (or parts of it) in a temporary variable with a name that explains the purpose.'
-  id: 17
   question: '(Refactor) Replace Error Code with Exception description.'
   A: 'Instead of returning a special code to indicate an error, raise an exception.'
   B: 'If a public method is not used by any other class, make it a private method.'
   C: 'The code has a fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.'
   D: 'The code has a complicated expression. Put the result of the expression (or parts of it) in a temporary variable with a name that explains the purpose.'
-  id: 18
   question: '(Refactor) Introduced Named Parameter description.'
   A: 'If a public method is not used by any other class, make it a private method.'
   B: 'Convert the parameter list into a hash and use the keys as names for the parameters.'
   C: 'The code has a function with a similar functionality from another function. Delete the repeated function.'
   D: 'Instead of returning a special code to indicate an error, raise an exception.'
-  id: 19
   question: '(Refactor) Replace loop with Collection Closure Method description.'
   A: 'Instead of returning a special code to indicate an error, raise an exception.'
   B: 'The code has a fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.'
   C: 'The code is processing elements of a collection in a loop. Replace the loop with a collection closure method.'
   D: 'If a public method is not used by any other class, make it a private method.'
-  id: 20
   question: '(Bad Smell) Duplicated Code description.'
   A: 'The object programs that live best and longest are those with the short methods.'
   B: 'A class which is trying to do much, so it shows up as too many instance variables.'
   C: 'Long parameter lists are hard to understand, because they become inconsistent and difficult to use.'
   D: 'Same expression in two methods of the same class.'
-  id: 21
   question: '(Bad Smell) Long Method description.'
   A: 'The object programs that live best and longest are those with the short methods.'
   B: 'Same expression in two methods of the same class.'
   C: 'Long parameter lists are hard to understand, because they become inconsistent and difficult to use.'
   D: 'A class which is trying to do much, so it shows up as too many instance variables.'
-  id: 22
   question: '(Bad Smell) Large Class description.'
   A: 'The object programs that live best and longest are those with the short methods.'
   B: 'A class which is trying to do much, so it shows up as too many instance variables.'
   C: 'Long parameter lists are hard to understand, because they become inconsistent and difficult to use.'
   D: 'Same expression in two methods of the same class.'
-  id: 23
   question: '(Bad Smell) Long Parameter List description.'
   A: 'Long parameter lists are easy to understand, because they become consistent and easy to use.'
   B: 'Long parameter lists are hard to understand, because they become consistent and easy to use.'
   C: 'Long parameter lists are hard to understand, because they become inconsistent and difficult to use.'
   D: 'Long parameter lists are easy to understand, because they become inconsistent and difficult to use.'
-  id: 24
   question: '(Bad Smell) Divergent Change description.'
   A: 'Long parameter lists are easy to understand, because they become inconsistent and difficult to use.'
   B: 'Same expression in two methods of the same class.'
   C: 'It occurs when one class is commonly changed in different ways for different reasons.'
   D: 'The object programs that live best and longest are those with the short methods.'
-  id: 25
   question: '(Bad Smell) Shotgun Surgery description.'
   A: 'The code is processing elements of a collection in a loop. Replace the loop with a collection closure method.'
   B: 'It occurs when one class is commonly changed in different ways for different reasons.'
   C: 'A class which is trying to do much, so it shows up as too many instance variables.'
   D: 'It occurs when one change alters many classes.'
-  id: 26
   question: '(Bad Smell) Feature Envy description.'
   A: 'A method that seems more interested in a class other than the one it actually is in.'
   B: 'It occurs when one class is commonly changed in different ways for different reasons.'
   C: 'A class which is trying to do much, so it shows up as too many instance variables.'
   D: 'It occurs when one change alters many classes.'
-  id: 27
   question: 'Description of the Composite Pattern.'
   A: 'This behavioral design pattern defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This behavioral design pattern turns a set of behaviors into objects and makes them interchangeable inside original context object.'
   D: 'This structural design pattern provides a way to subscribe and unsubscribe to and from these events for any object that implements a subscriber interface.'
-  id: 28
   question: 'Description of the Iterator Pattern.'
   A: 'This behavioral design pattern defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This behavioral design pattern lets you traverse elements of a collection without exposing its underlying representations.'
   D: 'This behavioral design pattern turns a request into a stand-alone object that contains all information about the request.'
-  id: 29
   question: 'Description of the Command Pattern.'
   A: 'This behavioral design pattern defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This structural design pattern allows objects with incompatible interfaces to collaborate.'
   D: 'This behavioral design pattern turns a request into a stand-alone object that contains all information about the request.'
-  id: 30
   question: 'Description of the Adapter Pattern.'
   A: 'This structural design pattern allows objects with incompatible interfaces to collaborate.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This behavioral design pattern lets you traverse elements of a collection without exposing its underlying representations.'
   D: 'This behavioral design pattern turns a request into a stand-alone object that contains all information about the request.'
-  id: 31
   question: 'Description of the Proxy Pattern.'
   A: 'This behavioral design pattern lets you traverse elements of a collection without exposing its underlying representations.'
   B: 'This structural design pattern lets you provide a substitute or placeholder for another object.'
   C: 'This structural design pattern lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.'
   D: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
-  id: 32
   question: 'Description of the Decorator Pattern.'
   A: 'This structural design pattern allows objects with incompatible interfaces to collaborate.'
   B: 'This behavioral design pattern defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'
   C: 'This structural design pattern lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.'
   D: 'This creational design pattern lets you ensure that a class has only one instance, while providing a global access point to this instance.'
-  id: 33
   question: 'Description of the Singleton Pattern.'
   A: 'This creational design pattern provides an interface for creating objects in a superclass, but, allows subclasses to alter the type of objects that will be created.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This behavioral design pattern turns a set of behaviors into objects and makes them interchangeable inside original context object.'
   D: 'This creational design pattern lets you ensure that a class has only one instance, while providing a global access point to this instance.'
-  id: 34
   question: 'Description of the Factory Pattern.'
   A: 'This creational design pattern provides an interface for creating objects in a superclass, but, allows subclasses to alter the type of objects that will be created.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This creational pattern lets you construct complex objects step by step and allows to produce different types and representations of an object using the same construction code.'
   D: 'This creational design pattern lets you ensure that a class has only one instance, while providing a global access point to this instance.'
-  id: 35
   question: 'Description of the Builder Pattern.'
   A: 'This pattern constructs an Abstract Syntax Tree with its corresponding language that will be the rules that you will need to follow.'
   B: 'This creational pattern lets you construct complex objects step by step and allows to produce different types and representations of an object using the same construction code.'
   C: 'This creational design pattern provides an interface for creating objects in a superclass, but, allows subclasses to alter the type of objects that will be created.'
   D: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
-  id: 36
   question: 'Description of the Interpreter Pattern.'
   A: 'This creational design pattern provides an interface for creating objects in a superclass, but, allows subclasses to alter the type of objects that will be created.'
   B: 'This structural design pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.'
   C: 'This pattern constructs an Abstract Syntax Tree with its corresponding language that will be the rules that you will need to follow.'
   D: 'This pattern suggests to focus on the language itself, not on the interpreter, as it gives the user a convenient syntax for expressing a problem.'
-  id: 37
   question: 'Description of the Domain Specific Language Pattern.'
   A: 'This pattern constructs an Abstract Syntax Tree with its corresponding language that will be the rules that you will need to follow.'
   B: 'This pattern suggests us to take advantage of the dynamic behaviors as an alternative way to access objects that we need.'
   C: 'This creational design pattern lets you ensure that a class has only one instance, while providing a global access point to this instance.'
   D: 'This pattern suggests to focus on the language itself, not on the interpreter, as it gives the user a convenient syntax for expressing a problem.'
-  id: 38
   question: 'Description of the Meta-programming Pattern.'
   A: 'This pattern suggests us to take advantage of the dynamic behaviors as an alternative way to access objects that we need.'
   B: 'This pattern focuses on providing a starter template and attempts to anticipate the users needs.'
   C: 'This creational design pattern lets you ensure that a class has only one instance, while providing a global access point to this instance.'
   D: 'This pattern suggests to focus on the language itself, not on the interpreter, as it gives the user a convenient syntax for expressing a problem.'
-  id: 39
   question: 'Description of the Convention over Configuration Pattern.'
   A: 'This pattern suggests to focus on the language itself, not on the interpreter, as it gives the user a convenient syntax for expressing a problem.'
   B: 'This pattern focuses on providing a starter template and attempts to anticipate the users needs.'
   C: 'This pattern constructs an Abstract Syntax Tree with its corresponding language that will be the rules that you will need to follow.'
   D: 'This behavioral design pattern defines a skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.'